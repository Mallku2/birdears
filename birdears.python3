#!/usr/bin/env python3

from random import randrange

# maybe we'd better use circle of fifths here
notes = ['C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B']

major = {'A': ['A', 'B', 'C#', 'D', 'E', 'F#', 'G#', 'A'],
 'Ab': ['Ab', 'Bb', 'C', 'Db', 'Eb', 'F', 'G', 'Ab'],
 'B': ['B', 'C#', 'D#', 'E', 'F#', 'G#', 'A#', 'B'],
 'Bb': ['Bb', 'C', 'D', 'Eb', 'F', 'G', 'A', 'Bb'],
 'C': ['C', 'D', 'E', 'F', 'G', 'A', 'B', 'C'],
 'C#': ['C#', 'D#', 'E#', 'F#', 'G#', 'A#', 'B#', 'C#'],
 'D': ['D', 'E', 'F#', 'G', 'A', 'B', 'C#', 'D'],
 'E': ['E', 'F#', 'G#', 'A', 'B', 'C#', 'D#', 'E'],
 'Eb': ['Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'D', 'Eb'],
 'F': ['F', 'G', 'A', 'Bb', 'C', 'D', 'E', 'F'],
 'F#': ['F#', 'G#', 'A#', 'B', 'C#', 'D#', 'E#', 'F#'],
 'G': ['G', 'A', 'B', 'C', 'D', 'E', 'F#', 'G']}

minor = {'A': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'A'],
 'Ab': ['Ab', 'Bb', 'Cb', 'Db', 'Eb', 'Fb', 'Gb', 'Ab'],
 'B': ['B', 'C#', 'D', 'E', 'F#', 'G', 'A', 'B'],
 'Bb': ['Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'Ab', 'Bb'],
 'C': ['C', 'D', 'Eb', 'F', 'G', 'Ab', 'Bb', 'C'],
 'C#': ['C#', 'D#', 'E', 'F#', 'G#', 'A', 'B', 'C#'],
 'D': ['D', 'E', 'F', 'G', 'A', 'Bb', 'C', 'D'],
 'E': ['E', 'F#', 'G', 'A', 'B', 'C', 'D', 'E'],
 'Eb': ['Eb', 'F', 'Gb', 'Ab', 'Bb', 'Cb', 'Db', 'Eb'],
 'F': ['F', 'G', 'Ab', 'Bb', 'C', 'Db', 'Eb', 'F'],
 'F#': ['F#', 'G#', 'A', 'B', 'C#', 'D', 'E', 'F#'],
 'G': ['G', 'A', 'Bb', 'C', 'D', 'Eb', 'F', 'G']}

chromatic = {'A': ['A', 'Bb', 'B', 'C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A'],
 'Ab': ['Ab', 'A', 'Bb', 'B', 'C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab'],
 'B': ['B', 'C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B'],
 'Bb': ['Bb', 'B', 'C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb'],
 'C': ['C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B', 'C'],
 'C#': ['C#', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'C#'],
 'D': ['D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'C#', 'D'],
 'E': ['E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'C#', 'D', 'Eb', 'E'],
 'Eb': ['Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'C#', 'D', 'Eb'],
 'F': ['F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'C#', 'D', 'Eb', 'E', 'F'],
 'F#': ['F#', 'G', 'Ab', 'A', 'Bb', 'B', 'C', 'C#', 'D', 'Eb', 'E', 'F', 'F#'],
 'G': ['G', 'Ab', 'A', 'Bb', 'B', 'C', 'C#', 'D', 'Eb', 'E', 'F', 'F#', 'G']}

class _Getch:
    """Gets a single character from standard input.  Does not echo to the
screen."""
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()

    def __call__(self): return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt
        return msvcrt.getch()


getch = _Getch()

def get_question(scale, octave_int):
	scale_size = len(scale)
	tonic = scale[0]
	octave = str(octave_int)
	upper_octave = str(octave_int+1)
	concrete_sc = [tone+octave for tone in scale[:-1]]
	concrete_sc.append(tonic+upper_octave)
	print(concrete_sc)


while True:
    tonic = notes[randrange(len(notes))]
    scale = major[tonic]
    octave = randrange(2,6)
    get_question(scale,octave)
    print(getch())
    #if ch==3:
    #    exit(0)

