birdears.questions package
**************************


Submodules
==========


birdears.questions.harmonicinterval module
==========================================

class birdears.questions.harmonicinterval.HarmonicIntervalQuestion(mode='major', tonic=None, octave=None, descending=None, chromatic=None, n_octaves=None, valid_intervals=None, user_durations=None, prequestion_method='none', resolution_method='nearest_tonic', *args, **kwargs)

   Bases: "birdears.questionbase.QuestionBase"

   Implements a Harmonic Interval test.

   __init__(mode='major', tonic=None, octave=None, descending=None, chromatic=None, n_octaves=None, valid_intervals=None, user_durations=None, prequestion_method='none', resolution_method='nearest_tonic', *args, **kwargs)

      Inits the class.

      Parameters:
         * **mode** (*str*) – A string representing the mode of the
           question. Eg., ‘major’ or ‘minor’

         * **tonic** (*str*) – A string representing the tonic of
           the question, eg.: ‘C’; if omitted, it will be selected
           randomly.

         * **octave** (*int*) – A scienfic octave notation, for
           example, 4 for ‘C4’; if not present, it will be randomly
           chosen.

         * **descending** (*bool*) – Is the question direction in
           descending, ie., intervals have lower pitch than the tonic.

         * **chromatic** (*bool*) – If the question can have (True)
           or not (False) chromatic intervals, ie., intervals not in
           the diatonic scale of tonic/mode.

         * **n_octaves** (*int*) – Maximum number of octaves of the
           question.

         * **valid_intervals** (*list*) – A list with intervals
           (int) valid for random choice, 1 is 1st, 2 is second etc.
           Eg. [1, 4, 5] to allow only tonics, fourths and fifths.

         * **user_durations** (*str*) –

           A string with 9 comma-separated *int* or *float`s to set
           the default duration for the notes played. The values are
           respectively for: pre-question duration (1st), pre-question
           delay (2nd), and pre-question pos-delay (3rd); question
           duration (4th), question delay (5th), and question pos-
           delay (6th); resolution duration (7th), resolution delay
           (8th), and resolution pos-delay (9th). duration is the
           duration in of the note in seconds; delay is the time to
           wait before playing the next note, and pos_delay is the
           time to wait after all the notes of the respective sequence
           have been played. If any of the user durations is `n*, the
           default duration for the type of question will be used
           instead. Example:

              "2,0.5,1,2,n,0,2.5,n,1"

         * **prequestion_method** (*str*) – Method of playing a
           cadence or the exercise tonic before the question so to
           affirm the question musical tonic key to the ear. Valid
           ones are registered in the
           *birdears.prequestion.PREQUESION_METHODS* global dict.

         * **resolution_method** (*str*) – Method of playing the
           resolution of an exercise. Valid ones are registered in the
           *birdears.resolution.RESOLUTION_METHODS* global dict.

   check_question(user_input_char)

      Checks whether the given answer is correct.

   make_pre_question(method)

   make_question()

   make_resolution(method)

   play_question()

   play_resolution()


birdears.questions.instrumentaldictation module
===============================================

class birdears.questions.instrumentaldictation.InstrumentalDictationQuestion(mode='major', wait_time=11, n_repeats=1, max_intervals=3, n_notes=4, tonic=None, octave=None, descending=None, chromatic=None, n_octaves=None, valid_intervals=None, user_durations=None, prequestion_method='progression_i_iv_v_i', resolution_method='repeat_only', *args, **kwargs)

   Bases: "birdears.questionbase.QuestionBase"

   Implements an instrumental dictation test.

   __init__(mode='major', wait_time=11, n_repeats=1, max_intervals=3, n_notes=4, tonic=None, octave=None, descending=None, chromatic=None, n_octaves=None, valid_intervals=None, user_durations=None, prequestion_method='progression_i_iv_v_i', resolution_method='repeat_only', *args, **kwargs)

      Inits the class.

      Parameters:
         * **mode** (*str*) – A string representing the mode of the
           question. Eg., ‘major’ or ‘minor’.

         * **wait_time** (*float*) – Wait time in seconds for the
           next question or repeat.

         * **n_repeats** (*int*) – Number of times the same
           dictation will be repeated before the end of the exercise.

         * **max_intervals** (*int*) – The maximum number of random
           intervals the question will have.

         * **n_notes** (*int*) – The number of notes the melodic
           dictation will have.

         * **tonic** (*str*) – A string representing the tonic of
           the question, eg.: ‘C’; if omitted, it will be selected
           randomly.

         * **octave** (*int*) – A scienfic octave notation, for
           example, 4 for ‘C4’; if not present, it will be randomly
           chosen.

         * **descending** (*bool*) – Is the question direction in
           descending, ie., intervals have lower pitch than the tonic.

         * **chromatic** (*bool*) – If the question can have (True)
           or not (False) chromatic intervals, ie., intervals not in
           the diatonic scale of tonic/mode.

         * **n_octaves** (*int*) – Maximum number of octaves of the
           question.

         * **valid_intervals** (*list*) – A list with intervals
           (int) valid for random choice, 1 is 1st, 2 is second etc.
           Eg. [1, 4, 5] to allow only tonics, fourths and fifths.

         * **user_durations** (*str*) –

           A string with 9 comma-separated *int* or *float`s to set
           the default duration for the notes played. The values are
           respectively for: pre-question duration (1st), pre-question
           delay (2nd), and pre-question pos-delay (3rd); question
           duration (4th), question delay (5th), and question pos-
           delay (6th); resolution duration (7th), resolution delay
           (8th), and resolution pos-delay (9th). duration is the
           duration in of the note in seconds; delay is the time to
           wait before playing the next note, and pos_delay is the
           time to wait after all the notes of the respective sequence
           have been played. If any of the user durations is `n*, the
           default duration for the type of question will be used
           instead. Example:

              "2,0.5,1,2,n,0,2.5,n,1"

         * **prequestion_method** (*str*) – Method of playing a
           cadence or the exercise tonic before the question so to
           affirm the question musical tonic key to the ear. Valid
           ones are registered in the
           *birdears.prequestion.PREQUESION_METHODS* global dict.

         * **resolution_method** (*str*) – Method of playing the
           resolution of an exercise. Valid ones are registered in the
           *birdears.resolution.RESOLUTION_METHODS* global dict.

   check_question()

      Checks whether the given answer is correct.

      This currently doesn’t applies to instrumental dictation
      questions.

   make_pre_question(method)

   make_question(phrase_semitones)

   make_resolution(method)

   play_question()


birdears.questions.melodicdictation module
==========================================

class birdears.questions.melodicdictation.MelodicDictationQuestion(mode='major', max_intervals=3, n_notes=4, tonic=None, octave=None, descending=None, chromatic=None, n_octaves=None, valid_intervals=None, user_durations=None, prequestion_method='progression_i_iv_v_i', resolution_method='repeat_only', *args, **kwargs)

   Bases: "birdears.questionbase.QuestionBase"

   Implements a melodic dictation test.

   __init__(mode='major', max_intervals=3, n_notes=4, tonic=None, octave=None, descending=None, chromatic=None, n_octaves=None, valid_intervals=None, user_durations=None, prequestion_method='progression_i_iv_v_i', resolution_method='repeat_only', *args, **kwargs)

      Inits the class.

      Parameters:
         * **mode** (*str*) – A string representing the mode of the
           question. Eg., ‘major’ or ‘minor’.

         * **max_intervals** (*int*) – The maximum number of random
           intervals the question will have.

         * **n_notes** (*int*) – The number of notes the melodic
           dictation will have.

         * **tonic** (*str*) – A string representing the tonic of
           the question, eg.: ‘C’; if omitted, it will be selected
           randomly.

         * **octave** (*int*) – A scienfic octave notation, for
           example, 4 for ‘C4’; if not present, it will be randomly
           chosen.

         * **descending** (*bool*) – Is the question direction in
           descending, ie., intervals have lower pitch than the tonic.

         * **chromatic** (*bool*) – If the question can have (True)
           or not (False) chromatic intervals, ie., intervals not in
           the diatonic scale of tonic/mode.

         * **n_octaves** (*int*) – Maximum number of octaves of the
           question.

         * **valid_intervals** (*list*) – A list with intervals
           (int) valid for random choice, 1 is 1st, 2 is second etc.
           Eg. [1, 4, 5] to allow only tonics, fourths and fifths.

         * **user_durations** (*str*) –

           A string with 9 comma-separated *int* or *float`s to set
           the default duration for the notes played. The values are
           respectively for: pre-question duration (1st), pre-question
           delay (2nd), and pre-question pos-delay (3rd); question
           duration (4th), question delay (5th), and question pos-
           delay (6th); resolution duration (7th), resolution delay
           (8th), and resolution pos-delay (9th). duration is the
           duration in of the note in seconds; delay is the time to
           wait before playing the next note, and pos_delay is the
           time to wait after all the notes of the respective sequence
           have been played. If any of the user durations is `n*, the
           default duration for the type of question will be used
           instead. Example:

              "2,0.5,1,2,n,0,2.5,n,1"

         * **prequestion_method** (*str*) – Method of playing a
           cadence or the exercise tonic before the question so to
           affirm the question musical tonic key to the ear. Valid
           ones are registered in the
           *birdears.prequestion.PREQUESION_METHODS* global dict.

         * **resolution_method** (*str*) – Method of playing the
           resolution of an exercise. Valid ones are registered in the
           *birdears.resolution.RESOLUTION_METHODS* global dict.

   check_question(user_input_keys)

      Checks whether the given answer is correct.

   make_pre_question(method)

   make_question(phrase_semitones)

   make_resolution(method)

   play_question()

   play_resolution()


birdears.questions.melodicinterval module
=========================================

class birdears.questions.melodicinterval.MelodicIntervalQuestion(mode='major', tonic=None, octave=None, descending=None, chromatic=None, n_octaves=None, valid_intervals=None, user_durations=None, prequestion_method='tonic_only', resolution_method='nearest_tonic', *args, **kwargs)

   Bases: "birdears.questionbase.QuestionBase"

   Implements a Melodic Interval test.

   check_question(user_input_char)

      Checks whether the given answer is correct.

   make_pre_question(method)

   make_question()

   make_resolution(method)

   play_question()

   play_resolution()
